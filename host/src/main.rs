// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{PROVE_MOON_LANDING_ELF, PROVE_MOON_LANDING_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use plotters::prelude::*;
use trajectory_core::{APPROXIMATE_CLIP_ONE_TRAJECTORY, APPROXIMATE_CLIP_TWO_TRAJECTORY};

fn main() {
    env_logger::init();

    plot(1, APPROXIMATE_CLIP_ONE_TRAJECTORY, 4.5f32, -0f32).unwrap();
    println!("Plotted clip 1 data in `graphs/simulated-clip-1.png`");
    plot(2, APPROXIMATE_CLIP_TWO_TRAJECTORY, 9.5f32, 3.8).unwrap();
    println!("Plotted clip 2 data in `graphs/simulated-clip-2.png`");

    let env = ExecutorEnv::builder().build().unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove_elf(env, PROVE_MOON_LANDING_ELF).unwrap();

    println!("Generated a proof that the trajactory calculation matches the expectation.");

    let _output: u32 = receipt.journal.decode().unwrap();

    receipt.verify(PROVE_MOON_LANDING_ID).unwrap();
    println!("I verified the proof for the trajectory calculation.");
}


fn plot(clip_number: u8, trajectory: [(f64, f64); 27], xsize: f32, ysize: f32) -> Result<(), Box<dyn std::error::Error>> {
    let filename = format!("graphs/simulated-clip-{}.png", clip_number);
    let root = BitMapBackend::new(&filename, (640, 480)).into_drawing_area();
    root.fill(&WHITE)?;
    let mut chart = ChartBuilder::on(&root)
        .caption("Simulated Dust Trajectory", ("sans-serif", 50).into_font())
        .margin(5)
        .x_label_area_size(30)
        .y_label_area_size(30)
        .build_cartesian_2d(0f32..xsize, -0f32..ysize)?;

    chart.configure_mesh().draw()?;

    chart
        .draw_series(LineSeries::new(
            trajectory.iter().map(|&(x, z)| (x as f32, z as f32)),
            &RED,
        ))?
        .label("Simulated lunar trajectory")
        .legend(|(x, y)| PathElement::new(vec![(x, y), (x + 20, y)], &RED));

    chart
        .configure_series_labels()
        .background_style(&WHITE.mix(0.8))
        .border_style(&BLACK)
        .draw()?;

    root.present()?;

    Ok(())
}